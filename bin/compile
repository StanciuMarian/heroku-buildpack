#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

dotnet_version="${DOTNET_VERSION-5.0.200}"
retype_version="${RETYPE_VERSION-1.5.0}"
retype_config_path="${RETYPE_CONFIG}"
retype_license_key="${RETYPE_LICENSE_KEY}"

build_dir="${1}"
cache_dir="${2}"
env_dir="${3}"
bp_dir="$(readlink -f "${BASH_SOURCE}")"
bp_dir="${bp_dir%/*/*}"
dotnet_root="${cache_dir}/dotnet/v${dotnet_version}"
usr_root="${build_dir}/usr"
oldwd="$(pwd)"

source "${bp_dir}/include/functions.inc.sh" || {
 >&2 echo " ! ## Error: Unable to include buildpack common functions include for main script."
 exit 1
}

section "Moving repository out of build directory"
tmpdir="$(mktemp --directory 2>&1)" || \
 fail_cmd "Unable to create temporary directory" "mktemp --directory" "${tmpdir}"
full_tmpdir="${tmpdir}/${build_dir##*/}"
result="$(mv "${build_dir}" "${tmpdir}/." 2>&1)" || \
 fail_cmd "Unable to move repository into temp dir" "mv \"${build_dir}\" \"${tmpdir}/.\"" "${result}"
notice "Repository moved from '${build_dir}' into '${full_tmpdir}'."

section "Prepare Retype CLI"
dotnet_installed=false
if which dotnet > /dev/null 2>&1; then
 dotnet_currver="$(dotnet --version 2>&1 | strings)" || \
  fail_cmd "The 'dotnet' CLI is in path but returned error when querying version" \
   "dotnet --version" "${dotnet_currver}"

 if ! echo "${dotnet_currver}" | egrep -q "^([0-9]+\.){2}[0-9]+\$"; then
  fail "Invalid version retrieved from 'dotnet --version': ${dotnet_currver}"
 elif [ "${dotnet_currver}" == "${dotnet_version}" ]; then
  dotnet_installed=true
  notice "The 'dotnet' CLI is installed, version ${dotnet_version} (expected version)."
 else
  notice "The 'dotnet' CLI is installed but version ${dotnet_currver} (expected ${dotnet_version})."
 fi
else
 notice "The 'dotnet' CLI is not installed."
fi

if ! ${dotnet_installed}; then
 notice "Installing the 'dotnet' CLI"
 if ! check_dotnet_install silent; then

  cmd=(curl --silent --location https://dot.net/v1/dotnet-install.sh)
  curlout="$("${cmd[@]}" 2>&1 | \
   bash -s -- --version "${dotnet_version}" --install-dir "${dotnet_root}")" || \
   fail_cmd ", failed" "Error while running remote dotnet install" \
    "${cmd[*]} | bash -s -- --version \"${dotnet_version}\" --install-dir \"${dotnet_root}\"" \
    "${curlout}"

  if ! check_dotnet_install ", failed"; then
   exit 1
  fi
 fi

 notice "Setting up 'dontet' CLI paths..."
 export PATH="${dotnet_root}:${HOME}/.dotnet/tools:${PATH}"
 export DOTNET_ROOT="${dotnet_root}"
fi

retype_installed=false
if which retype > /dev/null 2>&1; then
 retype_currver="$(retype --version 2>&1 | strings)" || \
  fail_cmd "failed" "Retype CLI is in path but returned error when querying version" \
   "retype --version" "${retype_currver}"

 if ! echo "${retype_currver}" | egrep -q "^[0-9]+\.[0-9]+\.[0-9]+(|-.+)\$"; then
  fail "Invalid version retrieved from 'retype --version': ${retype_currver}"
 elif [ "${retype_currver}" == "${retype_version}" ]; then
  retype_installed=true
  notice "Retype CLI is installed, version ${retype_version} (expected version)."
 else
  notice "Retype CLI is installed but version ${retype_currver} (expected ${retype_version})."
 fi
else
 notice "Retype CLI is not installed."
fi

if ! ${retype_installed}; then
 notice "Installing Retype CLI"
 cmd=(dotnet tool install retypeapp --global --version "${retype_version}")
 retypeinstallout="$("${cmd[@]}" 2>&1)" || \
  fail_cmd "failed" "Error while installing Retype dotnet tool" "${cmd[*]}" "${curlout}"

 if ! which retype > /dev/null 2>&1; then
  fail "Unable to install retype as a dotnet tool. Executable not in path after installation."
 fi
fi

notice "Switching to repo temp dir: ${full_tmpdir}"
cd "${full_tmpdir}" || fail "Unable to change to build directory: ${full_tmpdir}"

if [ -z "${retype_config_path}" ]; then
 if [ -e "retype.json" ]; then
  notice "Found 'retype.json' at repository root."
 else
  retype_config_path="$(find ./ -iname "retype.json" | head -n1)"

  if [ -z "${retype_config_path}" ]; then
   fail "Unable to locate any usable 'retype.json' file in repository."
  else
   notice "Found 'retype.json' at: ${retype_config_path}"
  fi
 fi
else
 notice "The 'retype.json' file is specified via RETYPE_CONFIG env var"
 if [ ! -e "${retype_config_path}" ]; then
  fail "Specified path to retype.json not found in repository: ${retype_config_path}"
 elif [ -d "${retype_config_path}" ]; then
  notice "RETYPE_CONFIG path points to a directory containing 'retype.json'."
  if [ ! -f "${retype_config_path}/retype.json" ]; then
   fail "Unable to find 'retype.json' within specified RETYPE_CONFIG: ${retype_config_path}"
  fi
 else
  notice "RETYPE_CONFIG path points to file: ${retype_config_path}"
 fi
fi

notice "Building retype commandline arguments"
cmdargs=(--verbose)
if [ ! -z "${retype_config_path}" ]; then
 cmdargs+=("${retype_config_path}")
fi

overridestr="$(append_json "" "output" "${build_dir}/wwwroot")" || \
 fail "Unable to append output path setting while building the 'retype build' argument list."

if [ ! -z "${retype_license_key}" ]; then
 overridestr="$(append_json "${overridestr}" "license" "${retype_license_key}")" || \
  fail "Unable to append 'license' setting while building the 'retype build' argument list."
fi

overridestr="{
${overridestr}
}"
cmdargs+=("--override" "${overridestr}")

section "Building documentation with Retype"
cmd=(retype build "${cmdargs[@]}")
retypeout="$("${cmd[@]}" 2>&1)" || \
 fail_cmd "Retype build command failed with exit status ${?}" "${cmd[*]}" "${result}"

if [ ! -d "${build_dir}/wwwroot" -o ! -e "${build_dir}/wwwroot/index.html" ]; then
 fail "Retype built files cannot be found in target directory: ${build_dir}/wwwroot"
fi

notice "Documentation built successfully!"

notice "Switching back to original working directory: ${oldwd}"
cd "${oldwd}" || fail "Unable to change back to original working directory: ${oldwd}"

if [ -x "${cache_dir}/usr/sbin/lighttpd" ]; then
 section "The lighttpd daemon is found (cached)."
else
 section "Setting up lighttpd"

 cpucount="$(( 10#$(egrep "^processor.*:" /proc/cpuinfo | tail -n1 | cut -f2 -d: | sed -E "s/ +//g") + 1 ))"
 makejobs="$(( 10#${cpucount} + 1 ))"
 notice "Found ${cpucount} logical CPU cores. Will use ${makejobs} jobs to compile."

 export LD_LIBRARY_PATH="${usr_root}/lib"
 export PATH="${usr_root}/sbin:${usr_root}/bin:${PATH}"

 echo "\${HOME}/usr/lib" > "${env_dir}/LD_LIBRARY_PATH"

 if [ ! -e "${env_dir}/PATH" ]; then
  echo "\${HOME}/usr/sbin:\${HOME}/usr/bin:\${PATH}" > "${env_dir}/PATH"
 else
  echo "\${HOME}/usr/sbin:\${HOME}/usr/bin:$(cat "${env_dir}/PATH")" > "${env_dir}/PATH"
 fi

 notice "Setting up libpcre"
 gbs_compile \
  --url="https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.bz2" \
  --eopt="--disable-cpp"

 notice "Setting up zlib"
 gbs_compile \
  --url="https://zlib.net/zlib-1.2.11.tar.gz"

 notice "Setting up lighttpd"
 gbs_compile \
  --url="https://download.lighttpd.net/lighttpd/releases-1.4.x/lighttpd-1.4.59.tar.xz" \
  --cflags="-I${usr_root}/include" \
  --ldflags="-L${usr_root}/lib"

 notice "Creating lighttpd config file"
 cat << EOC > ${build_dir}/lighttpd.conf
server.document-root = env.HOME + "/wwwroot"
server.port = env.PORT
index-file.names = ( "index.html" )
server.modules += ("mod_accesslog")
accesslog.filename = "/dev/fd/3"
mimetype.assign = (
  ".bz2" => "application/x-bzip",
  ".css" => "text/css",
  ".html" => "text/html",
  ".htm" => "text/html",
  ".cfg" => "text/plain",
  ".conf" => "text/plain",
  ".gz" => "application/x-gzip",
  ".jpg" => "image/jpeg",
  ".js" => "text/javascript",
  ".json" => "application/json",
  ".log" => "text/plain",
  ".pdf" => "application/pdf",
  ".png" => "image/png",
  ".tar" => "application/x-tar",
  ".tar.gz" => "application/x-tgz",
  ".tar.bz2" => "application/x-bzip-compressed-tar",
  ".tbz" => "application/x-bzip-compressed-tar",
  ".tgz" => "application/x-tgz",
  ".txt" => "text/plain",
  ".xml" => "text/xml",
  ".zip" => "application/zip",
  "" => "application/octet-stream"
)
EOC
 notice "Default lighttpd config file saved."
fi

section "Build is complete."